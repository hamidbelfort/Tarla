#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tarla
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TarlaDB")]
	public partial class dcTarlaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductGroup(ProductGroup instance);
    partial void UpdateProductGroup(ProductGroup instance);
    partial void DeleteProductGroup(ProductGroup instance);
    partial void InsertSeller(Seller instance);
    partial void UpdateSeller(Seller instance);
    partial void DeleteSeller(Seller instance);
    partial void InsertReceiver(Receiver instance);
    partial void UpdateReceiver(Receiver instance);
    partial void DeleteReceiver(Receiver instance);
    partial void InsertBuyer(Buyer instance);
    partial void UpdateBuyer(Buyer instance);
    partial void DeleteBuyer(Buyer instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertItemGroup(ItemGroup instance);
    partial void UpdateItemGroup(ItemGroup instance);
    partial void DeleteItemGroup(ItemGroup instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertProductPacking(ProductPacking instance);
    partial void UpdateProductPacking(ProductPacking instance);
    partial void DeleteProductPacking(ProductPacking instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertSystemLog(SystemLog instance);
    partial void UpdateSystemLog(SystemLog instance);
    partial void DeleteSystemLog(SystemLog instance);
    partial void InsertForiegnReceiver(ForiegnReceiver instance);
    partial void UpdateForiegnReceiver(ForiegnReceiver instance);
    partial void DeleteForiegnReceiver(ForiegnReceiver instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertPayType(PayType instance);
    partial void UpdatePayType(PayType instance);
    partial void DeletePayType(PayType instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertInvoiceDetail(InvoiceDetail instance);
    partial void UpdateInvoiceDetail(InvoiceDetail instance);
    partial void DeleteInvoiceDetail(InvoiceDetail instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertInvoice(Invoice instance);
    partial void UpdateInvoice(Invoice instance);
    partial void DeleteInvoice(Invoice instance);
    partial void InsertBuyDetail(BuyDetail instance);
    partial void UpdateBuyDetail(BuyDetail instance);
    partial void DeleteBuyDetail(BuyDetail instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertBuyFactor(BuyFactor instance);
    partial void UpdateBuyFactor(BuyFactor instance);
    partial void DeleteBuyFactor(BuyFactor instance);
    partial void InsertDepot(Depot instance);
    partial void UpdateDepot(Depot instance);
    partial void DeleteDepot(Depot instance);
    #endregion
		
		public dcTarlaDataContext() : 
				base(global::Tarla.Properties.Settings.Default.TarlaDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dcTarlaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcTarlaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcTarlaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcTarlaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductGroup> ProductGroups
		{
			get
			{
				return this.GetTable<ProductGroup>();
			}
		}
		
		public System.Data.Linq.Table<Seller> Sellers
		{
			get
			{
				return this.GetTable<Seller>();
			}
		}
		
		public System.Data.Linq.Table<Receiver> Receivers
		{
			get
			{
				return this.GetTable<Receiver>();
			}
		}
		
		public System.Data.Linq.Table<Buyer> Buyers
		{
			get
			{
				return this.GetTable<Buyer>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<ItemGroup> ItemGroups
		{
			get
			{
				return this.GetTable<ItemGroup>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<ProductPacking> ProductPackings
		{
			get
			{
				return this.GetTable<ProductPacking>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<SystemLog> SystemLogs
		{
			get
			{
				return this.GetTable<SystemLog>();
			}
		}
		
		public System.Data.Linq.Table<ForiegnReceiver> ForiegnReceivers
		{
			get
			{
				return this.GetTable<ForiegnReceiver>();
			}
		}
		
		public System.Data.Linq.Table<FactorView> FactorViews
		{
			get
			{
				return this.GetTable<FactorView>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<PayType> PayTypes
		{
			get
			{
				return this.GetTable<PayType>();
			}
		}
		
		public System.Data.Linq.Table<BooksView> BooksViews
		{
			get
			{
				return this.GetTable<BooksView>();
			}
		}
		
		public System.Data.Linq.Table<FactorDetailsView> FactorDetailsViews
		{
			get
			{
				return this.GetTable<FactorDetailsView>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this.GetTable<InvoiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<Invoice> Invoices
		{
			get
			{
				return this.GetTable<Invoice>();
			}
		}
		
		public System.Data.Linq.Table<F_DetailsView> F_DetailsViews
		{
			get
			{
				return this.GetTable<F_DetailsView>();
			}
		}
		
		public System.Data.Linq.Table<BuyDetail> BuyDetails
		{
			get
			{
				return this.GetTable<BuyDetail>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<BuyFactor> BuyFactors
		{
			get
			{
				return this.GetTable<BuyFactor>();
			}
		}
		
		public System.Data.Linq.Table<Depot> Depots
		{
			get
			{
				return this.GetTable<Depot>();
			}
		}
		
		public System.Data.Linq.Table<ViewStock> ViewStocks
		{
			get
			{
				return this.GetTable<ViewStock>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertLog")]
		public int InsertLog([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Login", DbType="NVarChar(20)")] string login)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, login);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLog")]
		public int UpdateLog([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LogId", DbType="Int")] System.Nullable<int> logId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Logout", DbType="NVarChar(20)")] string logout)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), logId, logout);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteUsers")]
		public int DeleteUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckUserPass")]
		public int CheckUserPass([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Check", DbType="Bit")] ref System.Nullable<bool> check, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), check, pass);
			check = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckUsersName")]
		public int CheckUsersName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Check", DbType="Bit")] ref System.Nullable<bool> check, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(20)")] string name)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), check, name);
			check = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLoginId")]
		public int GetLoginId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] ref System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="NVarChar(20)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, user, pass);
			id = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsSetting")]
		public int ExistsSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exists", DbType="Bit")] ref System.Nullable<bool> exists)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exists);
			exists = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsUsers")]
		public int ExistsUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exist", DbType="Bit")] ref System.Nullable<bool> exist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exist);
			exist = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsRoles")]
		public int ExistsRoles([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exist", DbType="Bit")] ref System.Nullable<bool> exist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exist);
			exist = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertRole")]
		public int InsertRole([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="NVarChar(50)")] string roleName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Settings", DbType="Bit")] System.Nullable<bool> settings, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="Bit")] System.Nullable<bool> user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bank", DbType="Bit")] System.Nullable<bool> bank, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Factor", DbType="Bit")] System.Nullable<bool> factor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleName, settings, user, bank, factor);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillRolesById")]
		public ISingleResult<FillRolesByIdResult> FillRolesById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId);
			return ((ISingleResult<FillRolesByIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateRole")]
		public int UpdateRole([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleName", DbType="NVarChar(50)")] string roleName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Settings", DbType="Bit")] System.Nullable<bool> settings, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="Bit")] System.Nullable<bool> user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bank", DbType="Bit")] System.Nullable<bool> bank, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Factor", DbType="Bit")] System.Nullable<bool> factor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId, roleName, settings, user, bank, factor);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillUsersById")]
		public ISingleResult<FillUsersByIdResult> FillUsersById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<FillUsersByIdResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertUser")]
		public int InsertUser([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fullname", DbType="NVarChar(30)")] string fullname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="NVarChar(20)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId, fullname, user, pass);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateUsers")]
		public int UpdateUsers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fullname", DbType="NVarChar(30)")] string fullname, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="NVarChar(20)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, roleId, fullname, user, pass);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillRoles")]
		public ISingleResult<Role> FillRoles()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Role>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteGroups")]
		public int DeleteGroups([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteProducts")]
		public int DeleteProducts([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillGroups")]
		public ISingleResult<ProductGroup> FillGroups()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ProductGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillGroupsById")]
		public ISingleResult<ProductGroup> FillGroupsById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId);
			return ((ISingleResult<ProductGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillProductsById")]
		public ISingleResult<Product> FillProductsById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId);
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterProductsByName")]
		public ISingleResult<Product> FilterProductsByName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(30)")] string productName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productName);
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertGroups")]
		public int InsertGroups([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="NVarChar(30)")] string groupName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertProducts")]
		public int InsertProducts([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(30)")] string productName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productName, groupId, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateProducts")]
		public int UpdateProducts([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(30)")] string productName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productId, productName, groupId, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateGroups")]
		public int UpdateGroups([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="NVarChar(30)")] string groupName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, groupName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterProductsByGroup")]
		public ISingleResult<Product> FilterProductsByGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(30)")] string productName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId, productName);
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterProducts")]
		public ISingleResult<Product> FilterProducts([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductName", DbType="NVarChar(30)")] string productName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), productName);
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteBuyer")]
		public int DeleteBuyer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteCompany")]
		public int DeleteCompany([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyId", DbType="Int")] System.Nullable<int> companyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteReceiver")]
		public int DeleteReceiver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiverId", DbType="Int")] System.Nullable<int> receiverId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiverId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteSeller")]
		public int DeleteSeller([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SellerId", DbType="Int")] System.Nullable<int> sellerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sellerId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBuyer")]
		public ISingleResult<Buyer> FillBuyer()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Buyer>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBuyerById")]
		public ISingleResult<Buyer> FillBuyerById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerId);
			return ((ISingleResult<Buyer>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillCompanyById")]
		public ISingleResult<Company> FillCompanyById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyId", DbType="Int")] System.Nullable<int> companyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyId);
			return ((ISingleResult<Company>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillCompany")]
		public ISingleResult<Company> FillCompany()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Company>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillReceiver")]
		public ISingleResult<Receiver> FillReceiver()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Receiver>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillReceiverById")]
		public ISingleResult<Receiver> FillReceiverById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiverId", DbType="Int")] System.Nullable<int> receiverId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiverId);
			return ((ISingleResult<Receiver>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillSeller")]
		public ISingleResult<Seller> FillSeller()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Seller>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillSellerById")]
		public ISingleResult<Seller> FillSellerById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SellerId", DbType="Int")] System.Nullable<int> sellerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sellerId);
			return ((ISingleResult<Seller>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertBuyer")]
		public int InsertBuyer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerName", DbType="NVarChar(50)")] string buyerName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(200)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerName, phone, address, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertCompany")]
		public int InsertCompany([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyName", DbType="NVarChar(100)")] string companyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Chief", DbType="NVarChar(30)")] string chief, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(MAX)")] string address)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyName, chief, phone, address);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertReceiver")]
		public int InsertReceiver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiverName", DbType="NVarChar(50)")] string receiverName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(200)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiverName, phone, address, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSeller")]
		public int InsertSeller([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SellerName", DbType="NVarChar(50)")] string sellerName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(200)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sellerName, phone, address, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateBuyer")]
		public int UpdateBuyer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerName", DbType="NVarChar(50)")] string buyerName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(200)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerId, buyerName, phone, address, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateCompany")]
		public int UpdateCompany([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyId", DbType="Int")] System.Nullable<int> companyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyName", DbType="NVarChar(100)")] string companyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Chief", DbType="NVarChar(30)")] string chief, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(MAX)")] string address)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyId, companyName, chief, phone, address);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateReceiver")]
		public int UpdateReceiver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiverId", DbType="Int")] System.Nullable<int> receiverId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiverName", DbType="NVarChar(50)")] string receiverName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(200)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiverId, receiverName, phone, address, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateSeller")]
		public int UpdateSeller([global::System.Data.Linq.Mapping.ParameterAttribute(Name="SellerId", DbType="Int")] System.Nullable<int> sellerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SellerName", DbType="NVarChar(50)")] string sellerName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(200)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sellerId, sellerName, phone, address, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAddressSetting")]
		public int GetAddressSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyName", DbType="NVarChar(100)")] ref string companyName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorAddress", DbType="NVarChar(MAX)")] ref string factorAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorTel", DbType="NVarChar(20)")] ref string factorTel)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyName, factorAddress, factorTel);
			companyName = ((string)(result.GetParameterValue(0)));
			factorAddress = ((string)(result.GetParameterValue(1)));
			factorTel = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetThemeSetting")]
		public int GetThemeSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ThemeName", DbType="NVarChar(50)")] ref string themeName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FontSize", DbType="Float")] ref System.Nullable<double> fontSize)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), themeName, fontSize);
			themeName = ((string)(result.GetParameterValue(0)));
			fontSize = ((System.Nullable<double>)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteItemGroup")]
		public int DeleteItemGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemGroupId", DbType="Int")] System.Nullable<int> itemGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemGroupId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteItems")]
		public int DeleteItems([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillItemGroupById")]
		public ISingleResult<Item> FillItemGroupById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemGroupId", DbType="Int")] System.Nullable<int> itemGroupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemGroupId);
			return ((ISingleResult<Item>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillItemGroup")]
		public ISingleResult<ItemGroup> FillItemGroup()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ItemGroup>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillItems")]
		public ISingleResult<Item> FillItems()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Item>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillItemsById")]
		public ISingleResult<Item> FillItemsById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId);
			return ((ISingleResult<Item>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertItems", IsComposable=true)]
		public object InsertItems([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemGroupId", DbType="Int")] System.Nullable<int> itemGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemName", DbType="NVarChar(50)")] string itemName)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemGroupId, itemName).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertItemGroup")]
		public int InsertItemGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="NVarChar(30)")] string groupName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit1", DbType="NVarChar(20)")] string unit1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit2", DbType="NVarChar(20)")] string unit2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupName, unit1, unit2);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateItemGroup")]
		public int UpdateItemGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemGroupId", DbType="Int")] System.Nullable<int> itemGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupName", DbType="NVarChar(30)")] string groupName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit1", DbType="NVarChar(20)")] string unit1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Unit2", DbType="NVarChar(20)")] string unit2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemGroupId, groupName, unit1, unit2);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateItems")]
		public int UpdateItems([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemGroupId", DbType="Int")] System.Nullable<int> itemGroupId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemName", DbType="NVarChar(50)")] string itemName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId, itemGroupId, itemName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillLogs")]
		public ISingleResult<Log> FillLogs([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId);
			return ((ISingleResult<Log>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillUsers")]
		public ISingleResult<User> FillUsers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<User>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLogId")]
		public int GetLogId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LogId", DbType="Int")] ref System.Nullable<int> logId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), logId, userId);
			logId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteRole")]
		public int DeleteRole([global::System.Data.Linq.Mapping.ParameterAttribute(Name="RoleId", DbType="Int")] System.Nullable<int> roleId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CheckLoginPassById")]
		public int CheckLoginPassById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Check", DbType="Bit")] ref System.Nullable<bool> check)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, pass, check);
			check = ((System.Nullable<bool>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateLoginPass")]
		public int UpdateLoginPass([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="NVarChar(20)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, pass);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeletePacking")]
		public int DeletePacking([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PackingId", DbType="Int")] System.Nullable<int> packingId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), packingId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillPacking")]
		public ISingleResult<ProductPacking> FillPacking()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ProductPacking>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillPackingById")]
		public ISingleResult<ProductPacking> FillPackingById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PackingId", DbType="Int")] System.Nullable<int> packingId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), packingId);
			return ((ISingleResult<ProductPacking>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertPacking")]
		public int InsertPacking([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PackingType", DbType="NVarChar(30)")] string packingType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), packingType);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdatePacking")]
		public int UpdatePacking([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PackingId", DbType="Int")] System.Nullable<int> packingId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PackingType", DbType="NVarChar(30)")] string packingType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), packingId, packingType);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteBank")]
		public int DeleteBank([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBank")]
		public ISingleResult<Bank> FillBank()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Bank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBankById")]
		public ISingleResult<Bank> FillBankById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId);
			return ((ISingleResult<Bank>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertBank")]
		public int InsertBank([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankName", DbType="NVarChar(100)")] string bankName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankNumber", DbType="NVarChar(30)")] string bankNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankOwner", DbType="NVarChar(100)")] string bankOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankDesc", DbType="NVarChar(MAX)")] string bankDesc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankName, bankNumber, bankOwner, bankDesc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateBank")]
		public int UpdateBank([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankName", DbType="NVarChar(100)")] string bankName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankNumber", DbType="NVarChar(30)")] string bankNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankOwner", DbType="NVarChar(100)")] string bankOwner, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankDesc", DbType="NVarChar(MAX)")] string bankDesc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bankId, bankName, bankNumber, bankOwner, bankDesc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSystemLog")]
		public int InsertSystemLog([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(30)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Message", DbType="NVarChar(MAX)")] string message, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FormName", DbType="NVarChar(30)")] string formName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, message, formName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillProducts")]
		public ISingleResult<Product> FillProducts()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Product>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteForeignReceiver")]
		public int DeleteForeignReceiver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="F_ReceiverId", DbType="Int")] System.Nullable<int> f_ReceiverId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), f_ReceiverId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillForeignReceiver")]
		public ISingleResult<ForiegnReceiver> FillForeignReceiver()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ForiegnReceiver>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillForeignReceiverById")]
		public ISingleResult<ForiegnReceiver> FillForeignReceiverById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="F_ReceiverId", DbType="Int")] System.Nullable<int> f_ReceiverId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), f_ReceiverId);
			return ((ISingleResult<ForiegnReceiver>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertForeignReceiver")]
		public int InsertForeignReceiver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(30)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(10)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(MAX)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="NVarChar(30)")] string country, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Desc", DbType="NVarChar(MAX)")] string desc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, phone, address, country, desc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateForeignReceiver")]
		public int UpdateForeignReceiver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="F_ReceiverId", DbType="Int")] System.Nullable<int> f_ReceiverId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="NVarChar(30)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(10)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(MAX)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="NVarChar(30)")] string country, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Desc", DbType="NVarChar(MAX)")] string desc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), f_ReceiverId, name, phone, address, country, desc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteInvoice")]
		public int DeleteInvoice([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceId", DbType="Int")] System.Nullable<int> invoiceId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterFactorByDate")]
		public ISingleResult<FactorView> FilterFactorByDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, date2);
			return ((ISingleResult<FactorView>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterFactorById")]
		public ISingleResult<FactorView> FilterFactorById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerId);
			return ((ISingleResult<FactorView>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMaxFactorId")]
		public int GetMaxFactorId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] ref System.Nullable<int> factorId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId);
			factorId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteMessage")]
		public int DeleteMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertMessage")]
		public int InsertMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MessageText", DbType="NVarChar(MAX)")] string messageText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), messageText);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillMessage")]
		public ISingleResult<Message> FillMessage()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Message>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetRandomMessage")]
		public int GetRandomMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MessageText", DbType="NVarChar(MAX)")] ref string messageText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), messageText);
			messageText = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetBalanceById")]
		public int GetBalanceById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Paid", DbType="Int")] ref System.Nullable<int> paid, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalPrice", DbType="Int")] ref System.Nullable<int> totalPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Amount", DbType="Int")] ref System.Nullable<int> amount)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerId, paid, totalPrice, amount);
			paid = ((System.Nullable<int>)(result.GetParameterValue(1)));
			totalPrice = ((System.Nullable<int>)(result.GetParameterValue(2)));
			amount = ((System.Nullable<int>)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterBooksViewByDate")]
		public ISingleResult<BooksView> FilterBooksViewByDate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date1", DbType="NVarChar(10)")] string date1, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date2", DbType="NVarChar(10)")] string date2)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date1, date2);
			return ((ISingleResult<BooksView>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FilterBooksViewById")]
		public ISingleResult<BooksView> FilterBooksViewById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerId);
			return ((ISingleResult<BooksView>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillBookById")]
		public ISingleResult<Book> FillBookById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookId", DbType="Int")] System.Nullable<int> bookId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookId);
			return ((ISingleResult<Book>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillPayType")]
		public ISingleResult<PayType> FillPayType()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<PayType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillPayTypeById")]
		public ISingleResult<PayType> FillPayTypeById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="PayTypeId", DbType="Int")] System.Nullable<int> payTypeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), payTypeId);
			return ((ISingleResult<PayType>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteBook")]
		public int DeleteBook([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookId", DbType="Int")] System.Nullable<int> bookId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertBook")]
		public int InsertBook([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Amount", DbType="Int")] System.Nullable<int> amount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PayType", DbType="Int")] System.Nullable<int> payType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookDesc", DbType="NVarChar(MAX)")] string bookDesc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, buyerId, amount, payType, bankId, bookDesc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateBook")]
		public int UpdateBook([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookId", DbType="Int")] System.Nullable<int> bookId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Amount", DbType="Int")] System.Nullable<int> amount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PayType", DbType="Int")] System.Nullable<int> payType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BankId", DbType="Int")] System.Nullable<int> bankId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BookDesc", DbType="NVarChar(MAX)")] string bookDesc)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bookId, date, buyerId, amount, payType, bankId, bookDesc);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetFactorNetSell")]
		public int GetFactorNetSell([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceId", DbType="Int")] System.Nullable<int> invoiceId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Netsell", DbType="Int")] ref System.Nullable<int> netsell, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalPrice", DbType="Int")] ref System.Nullable<int> totalPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Profit", DbType="Int")] ref System.Nullable<int> profit, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Loss", DbType="Int")] ref System.Nullable<int> loss)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceId, netsell, totalPrice, profit, loss);
			netsell = ((System.Nullable<int>)(result.GetParameterValue(1)));
			totalPrice = ((System.Nullable<int>)(result.GetParameterValue(2)));
			profit = ((System.Nullable<int>)(result.GetParameterValue(3)));
			loss = ((System.Nullable<int>)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateInvoiceNetSell")]
		public int UpdateInvoiceNetSell([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceId", DbType="Int")] System.Nullable<int> invoiceId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NetSell", DbType="Int")] System.Nullable<int> netSell, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Profit", DbType="Int")] System.Nullable<int> profit, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Loss", DbType="Int")] System.Nullable<int> loss)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceId, netSell, profit, loss);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetUserPermissions")]
		public int GetUserPermissions([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Setting", DbType="Bit")] ref System.Nullable<bool> setting, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Bank", DbType="Bit")] ref System.Nullable<bool> bank, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="User", DbType="Bit")] ref System.Nullable<bool> user, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Factor", DbType="Bit")] ref System.Nullable<bool> factor)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, setting, bank, user, factor);
			setting = ((System.Nullable<bool>)(result.GetParameterValue(1)));
			bank = ((System.Nullable<bool>)(result.GetParameterValue(2)));
			user = ((System.Nullable<bool>)(result.GetParameterValue(3)));
			factor = ((System.Nullable<bool>)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetBuyerNameAndPhone")]
		public int GetBuyerNameAndPhone([global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerName", DbType="NVarChar(50)")] ref string buyerName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerPhone", DbType="NVarChar(12)")] ref string buyerPhone)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), buyerId, buyerName, buyerPhone);
			buyerName = ((string)(result.GetParameterValue(1)));
			buyerPhone = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillFactorDetailsView")]
		public ISingleResult<FactorDetailsView> FillFactorDetailsView([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceId", DbType="Int")] System.Nullable<int> invoiceId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceId);
			return ((ISingleResult<FactorDetailsView>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ExistsMessage")]
		public int ExistsMessage([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Exists", DbType="Bit")] ref System.Nullable<bool> exists)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), exists);
			exists = ((System.Nullable<bool>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillSetting")]
		public ISingleResult<Setting> FillSetting()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Setting>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateSetting")]
		public int UpdateSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Company", DbType="NVarChar(100)")] string company, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorAddress", DbType="NVarChar(MAX)")] string factorAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactortTell", DbType="NVarChar(20)")] string factortTell, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Theme", DbType="NVarChar(50)")] string theme, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FontSize", DbType="Float")] System.Nullable<double> fontSize)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), company, factorAddress, factortTell, theme, fontSize);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SaveWallpaper")]
		public int SaveWallpaper([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Wallpaper", DbType="NVarChar(MAX)")] string wallpaper)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wallpaper);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetWallpaper")]
		public int GetWallpaper([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Wallpaper", DbType="NVarChar(MAX)")] ref string wallpaper)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), wallpaper);
			wallpaper = ((string)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ClearWallpaper")]
		public int ClearWallpaper()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetLoginName")]
		public int GetLoginName([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Fullname", DbType="NVarChar(30)")] ref string fullname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, fullname);
			fullname = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertSetting")]
		public int InsertSetting([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Company", DbType="NVarChar(100)")] string company, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorAddress", DbType="NVarChar(MAX)")] string factorAddress, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactortTell", DbType="NVarChar(20)")] string factortTell, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Theme", DbType="NVarChar(50)")] string theme, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FontSize", DbType="Float")] System.Nullable<double> fontSize)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), company, factorAddress, factortTell, theme, fontSize);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertInvoice")]
		public int InsertInvoice(
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Date", DbType="NVarChar(10)")] string date, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="BuyerId", DbType="Int")] System.Nullable<int> buyerId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverId", DbType="Int")] System.Nullable<int> driverId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalWeight", DbType="Int")] System.Nullable<int> totalWeight, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkerCount", DbType="Int")] System.Nullable<int> workerCount, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="WorkerCost", DbType="Int")] System.Nullable<int> workerCost, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TruckRental", DbType="Int")] System.Nullable<int> truckRental, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="MiscCost", DbType="Int")] System.Nullable<int> miscCost, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="WeightNote", DbType="NVarChar(20)")] string weightNote, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="DockWeightNote", DbType="NVarChar(20)")] string dockWeightNote, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiverId", DbType="Int")] System.Nullable<int> receiverId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="F_ReceiverId", DbType="Int")] System.Nullable<int> f_ReceiverId, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Discount", DbType="Int")] System.Nullable<int> discount, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalPrice", DbType="Int")] System.Nullable<int> totalPrice, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="NetSell", DbType="Int")] System.Nullable<int> netSell, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Paid", DbType="Int")] System.Nullable<int> paid, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Profit", DbType="Int")] System.Nullable<int> profit, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Loss", DbType="Int")] System.Nullable<int> loss, 
					[global::System.Data.Linq.Mapping.ParameterAttribute(Name="Description", DbType="NVarChar(MAX)")] string description)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, buyerId, driverId, totalWeight, workerCount, workerCost, truckRental, miscCost, weightNote, dockWeightNote, receiverId, f_ReceiverId, discount, totalPrice, netSell, paid, profit, loss, description);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertInvoiceDetails")]
		public int InsertInvoiceDetails([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceId", DbType="Int")] System.Nullable<int> invoiceId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ProductId", DbType="Int")] System.Nullable<int> productId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="SellerId", DbType="Int")] System.Nullable<int> sellerId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="PackingId", DbType="Int")] System.Nullable<int> packingId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Weight", DbType="Int")] System.Nullable<int> weight, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Loss", DbType="Int")] System.Nullable<int> loss, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Qty", DbType="Int")] System.Nullable<int> qty, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="NetWeight", DbType="Int")] System.Nullable<int> netWeight)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceId, productId, sellerId, packingId, weight, loss, qty, price, netWeight);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertDriver")]
		public int InsertDriver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverName", DbType="NVarChar(30)")] string driverName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LicenseId", DbType="NVarChar(11)")] string licenseId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LisensePlate", DbType="NVarChar(20)")] string lisensePlate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(MAX)")] string address)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), driverName, licenseId, lisensePlate, phone, address);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateDriver")]
		public int UpdateDriver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverId", DbType="Int")] System.Nullable<int> driverId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverName", DbType="NVarChar(30)")] string driverName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LicenseId", DbType="NVarChar(11)")] string licenseId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LisensePlate", DbType="NVarChar(20)")] string lisensePlate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Phone", DbType="NVarChar(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Address", DbType="NVarChar(MAX)")] string address)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), driverId, driverName, licenseId, lisensePlate, phone, address);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDriverById")]
		public ISingleResult<Driver> FillDriverById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverId", DbType="Int")] System.Nullable<int> driverId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), driverId);
			return ((ISingleResult<Driver>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteDriver")]
		public int DeleteDriver([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverId", DbType="Int")] System.Nullable<int> driverId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), driverId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDrivers")]
		public ISingleResult<Driver> FillDrivers()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Driver>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDriverLicensePlate")]
		public int GetDriverLicensePlate([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DriverId", DbType="Int")] System.Nullable<int> driverId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="LicensePlate", DbType="NVarChar(20)")] ref string licensePlate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), driverId, licensePlate);
			licensePlate = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetForiegnReceiverCountry")]
		public int GetForiegnReceiverCountry([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ReceiverId", DbType="Int")] System.Nullable<int> receiverId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Country", DbType="NVarChar(30)")] ref string country)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), receiverId, country);
			country = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetInvoiceDetails")]
		public ISingleResult<F_DetailsView> GetInvoiceDetails([global::System.Data.Linq.Mapping.ParameterAttribute(Name="InvoiceId", DbType="Int")] System.Nullable<int> invoiceId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), invoiceId);
			return ((ISingleResult<F_DetailsView>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SetDefaultDepot")]
		public int SetDefaultDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.UpdateDepot")]
		public int UpdateDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotName", DbType="NVarChar(50)")] string depotName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId, depotName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertDepot", IsComposable=true)]
		public object InsertDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotName", DbType="NVarChar(50)")] string depotName)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotName).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMaxBuyFactorId")]
		public int GetMaxBuyFactorId([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] ref System.Nullable<int> factorId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId);
			factorId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDefaultDepot")]
		public int GetDefaultDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] ref System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId);
			depotId = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDepot")]
		public ISingleResult<Depot> FillDepot()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<Depot>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillDepotById")]
		public ISingleResult<Depot> FillDepotById([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId);
			return ((ISingleResult<Depot>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DeleteDepot")]
		public int DeleteDepot([global::System.Data.Linq.Mapping.ParameterAttribute(Name="DepotId", DbType="Int")] System.Nullable<int> depotId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), depotId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillViewStock")]
		public ISingleResult<ViewStock> FillViewStock()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<ViewStock>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillViewStockByGroup")]
		public ISingleResult<ViewStock> FillViewStockByGroup([global::System.Data.Linq.Mapping.ParameterAttribute(Name="GroupId", DbType="Int")] System.Nullable<int> groupId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupId);
			return ((ISingleResult<ViewStock>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.FillViewStockByItem")]
		public ISingleResult<ViewStock> FillViewStockByItem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), itemId);
			return ((ISingleResult<ViewStock>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertBuyFactor")]
		public int InsertBuyFactor([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorDate", DbType="NVarChar(10)")] string factorDate, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorNumber", DbType="NVarChar(30)")] string factorNumber, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="CompanyId", DbType="Int")] System.Nullable<int> companyId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TotalPrice", DbType="Int")] System.Nullable<int> totalPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Discount", DbType="Int")] System.Nullable<int> discount, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="TaxCost", DbType="Int")] System.Nullable<int> taxCost, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ServiceCost", DbType="Int")] System.Nullable<int> serviceCost, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FinalPrice", DbType="Int")] System.Nullable<int> finalPrice, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorDes", DbType="NVarChar(MAX)")] string factorDes)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorDate, factorNumber, companyId, totalPrice, discount, taxCost, serviceCost, finalPrice, factorDes);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertBuyDetail")]
		public int InsertBuyDetail([global::System.Data.Linq.Mapping.ParameterAttribute(Name="FactorId", DbType="Int")] System.Nullable<int> factorId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemId", DbType="Int")] System.Nullable<int> itemId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Price", DbType="Int")] System.Nullable<int> price, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Qty", DbType="Int")] System.Nullable<int> qty)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), factorId, itemId, price, qty);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public sealed partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleId;
		
		private string _RoleName;
		
		private System.Nullable<bool> _SettingPermission;
		
		private System.Nullable<bool> _UserPermission;
		
		private System.Nullable<bool> _BankPermission;
		
		private System.Nullable<bool> _FactorPermission;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnSettingPermissionChanging(System.Nullable<bool> value);
    partial void OnSettingPermissionChanged();
    partial void OnUserPermissionChanging(System.Nullable<bool> value);
    partial void OnUserPermissionChanged();
    partial void OnBankPermissionChanging(System.Nullable<bool> value);
    partial void OnBankPermissionChanged();
    partial void OnFactorPermissionChanging(System.Nullable<bool> value);
    partial void OnFactorPermissionChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingPermission", DbType="Bit")]
		public System.Nullable<bool> SettingPermission
		{
			get
			{
				return this._SettingPermission;
			}
			set
			{
				if ((this._SettingPermission != value))
				{
					this.OnSettingPermissionChanging(value);
					this.SendPropertyChanging();
					this._SettingPermission = value;
					this.SendPropertyChanged("SettingPermission");
					this.OnSettingPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPermission", DbType="Bit")]
		public System.Nullable<bool> UserPermission
		{
			get
			{
				return this._UserPermission;
			}
			set
			{
				if ((this._UserPermission != value))
				{
					this.OnUserPermissionChanging(value);
					this.SendPropertyChanging();
					this._UserPermission = value;
					this.SendPropertyChanged("UserPermission");
					this.OnUserPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankPermission", DbType="Bit")]
		public System.Nullable<bool> BankPermission
		{
			get
			{
				return this._BankPermission;
			}
			set
			{
				if ((this._BankPermission != value))
				{
					this.OnBankPermissionChanging(value);
					this.SendPropertyChanging();
					this._BankPermission = value;
					this.SendPropertyChanged("BankPermission");
					this.OnBankPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorPermission", DbType="Bit")]
		public System.Nullable<bool> FactorPermission
		{
			get
			{
				return this._FactorPermission;
			}
			set
			{
				if ((this._FactorPermission != value))
				{
					this.OnFactorPermissionChanging(value);
					this.SendPropertyChanging();
					this._FactorPermission = value;
					this.SendPropertyChanged("FactorPermission");
					this.OnFactorPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public sealed partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private System.Nullable<int> _RoleId;
		
		private string _Fullname;
		
		private string _LoginUser;
		
		private string _LoginPass;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Nullable<int> value);
    partial void OnRoleIdChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnLoginUserChanging(string value);
    partial void OnLoginUserChanged();
    partial void OnLoginPassChanging(string value);
    partial void OnLoginPassChanged();
    #endregion
		
		public User()
		{
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(30)")]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginUser", DbType="NVarChar(50)")]
		public string LoginUser
		{
			get
			{
				return this._LoginUser;
			}
			set
			{
				if ((this._LoginUser != value))
				{
					this.OnLoginUserChanging(value);
					this.SendPropertyChanging();
					this._LoginUser = value;
					this.SendPropertyChanged("LoginUser");
					this.OnLoginUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginPass", DbType="NVarChar(50)")]
		public string LoginPass
		{
			get
			{
				return this._LoginPass;
			}
			set
			{
				if ((this._LoginPass != value))
				{
					this.OnLoginPassChanging(value);
					this.SendPropertyChanging();
					this._LoginPass = value;
					this.SendPropertyChanged("LoginPass");
					this.OnLoginPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Products")]
	public sealed partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private System.Nullable<int> _GroupId;
		
		private string _ProductName;
		
		private string _Description;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<ProductGroup> _ProductGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnGroupIdChanging(System.Nullable<int> value);
    partial void OnGroupIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Product()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._ProductGroup = default(EntityRef<ProductGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int")]
		public System.Nullable<int> GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._ProductGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(30)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup_Product", Storage="_ProductGroup", ThisKey="GroupId", OtherKey="GroupId", IsForeignKey=true)]
		public ProductGroup ProductGroup
		{
			get
			{
				return this._ProductGroup.Entity;
			}
			set
			{
				ProductGroup previousValue = this._ProductGroup.Entity;
				if (((previousValue != value) 
							|| (this._ProductGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductGroup.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductGroup.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._GroupId = value.GroupId;
					}
					else
					{
						this._GroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductGroups")]
	public sealed partial class ProductGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupId;
		
		private string _GroupName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public ProductGroup()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductGroup_Product", Storage="_Products", ThisKey="GroupId", OtherKey="GroupId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sellers")]
	public sealed partial class Seller : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SellerId;
		
		private string _SellerName;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Description;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSellerIdChanging(int value);
    partial void OnSellerIdChanged();
    partial void OnSellerNameChanging(string value);
    partial void OnSellerNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Seller()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					this.OnSellerIdChanging(value);
					this.SendPropertyChanging();
					this._SellerId = value;
					this.SendPropertyChanged("SellerId");
					this.OnSellerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="NVarChar(50)")]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this.OnSellerNameChanging(value);
					this.SendPropertyChanging();
					this._SellerName = value;
					this.SendPropertyChanged("SellerName");
					this.OnSellerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="SellerId", OtherKey="SellerId")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seller = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seller = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Receivers")]
	public sealed partial class Receiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReceiverId;
		
		private string _ReceiverName;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Description;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReceiverIdChanging(int value);
    partial void OnReceiverIdChanged();
    partial void OnReceiverNameChanging(string value);
    partial void OnReceiverNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Receiver()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReceiverId
		{
			get
			{
				return this._ReceiverId;
			}
			set
			{
				if ((this._ReceiverId != value))
				{
					this.OnReceiverIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverId = value;
					this.SendPropertyChanged("ReceiverId");
					this.OnReceiverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverName", DbType="NVarChar(30)")]
		public string ReceiverName
		{
			get
			{
				return this._ReceiverName;
			}
			set
			{
				if ((this._ReceiverName != value))
				{
					this.OnReceiverNameChanging(value);
					this.SendPropertyChanging();
					this._ReceiverName = value;
					this.SendPropertyChanged("ReceiverName");
					this.OnReceiverNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_Invoice", Storage="_Invoices", ThisKey="ReceiverId", OtherKey="ReceiverId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Receiver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Buyers")]
	public sealed partial class Buyer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BuyerId;
		
		private string _BuyerName;
		
		private string _Phone;
		
		private string _Address;
		
		private string _Description;
		
		private EntitySet<Book> _Books;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuyerIdChanging(int value);
    partial void OnBuyerIdChanged();
    partial void OnBuyerNameChanging(string value);
    partial void OnBuyerNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Buyer()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="NVarChar(50)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this.OnBuyerNameChanging(value);
					this.SendPropertyChanging();
					this._BuyerName = value;
					this.SendPropertyChanged("BuyerName");
					this.OnBuyerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_Book", Storage="_Books", ThisKey="BuyerId", OtherKey="BuyerId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_Invoice", Storage="_Invoices", ThisKey="BuyerId", OtherKey="BuyerId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = null;
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Buyer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Companies")]
	public sealed partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyId;
		
		private string _CompanyName;
		
		private string _Chief;
		
		private string _Phone;
		
		private string _Address;
		
		private EntitySet<BuyFactor> _BuyFactors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIdChanging(int value);
    partial void OnCompanyIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnChiefChanging(string value);
    partial void OnChiefChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Company()
		{
			this._BuyFactors = new EntitySet<BuyFactor>(new Action<BuyFactor>(this.attach_BuyFactors), new Action<BuyFactor>(this.detach_BuyFactors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(100)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chief", DbType="NVarChar(30)")]
		public string Chief
		{
			get
			{
				return this._Chief;
			}
			set
			{
				if ((this._Chief != value))
				{
					this.OnChiefChanging(value);
					this.SendPropertyChanging();
					this._Chief = value;
					this.SendPropertyChanged("Chief");
					this.OnChiefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_BuyFactor", Storage="_BuyFactors", ThisKey="CompanyId", OtherKey="CompanyId")]
		public EntitySet<BuyFactor> BuyFactors
		{
			get
			{
				return this._BuyFactors;
			}
			set
			{
				this._BuyFactors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuyFactors(BuyFactor entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_BuyFactors(BuyFactor entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemGroups")]
	public sealed partial class ItemGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemGroupId;
		
		private string _GroupName;
		
		private string _Unit1;
		
		private string _Unit2;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemGroupIdChanging(int value);
    partial void OnItemGroupIdChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnUnit1Changing(string value);
    partial void OnUnit1Changed();
    partial void OnUnit2Changing(string value);
    partial void OnUnit2Changed();
    #endregion
		
		public ItemGroup()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemGroupId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemGroupId
		{
			get
			{
				return this._ItemGroupId;
			}
			set
			{
				if ((this._ItemGroupId != value))
				{
					this.OnItemGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ItemGroupId = value;
					this.SendPropertyChanged("ItemGroupId");
					this.OnItemGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit1", DbType="NVarChar(20)")]
		public string Unit1
		{
			get
			{
				return this._Unit1;
			}
			set
			{
				if ((this._Unit1 != value))
				{
					this.OnUnit1Changing(value);
					this.SendPropertyChanging();
					this._Unit1 = value;
					this.SendPropertyChanged("Unit1");
					this.OnUnit1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit2", DbType="NVarChar(20)")]
		public string Unit2
		{
			get
			{
				return this._Unit2;
			}
			set
			{
				if ((this._Unit2 != value))
				{
					this.OnUnit2Changing(value);
					this.SendPropertyChanging();
					this._Unit2 = value;
					this.SendPropertyChanged("Unit2");
					this.OnUnit2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemGroup_Item", Storage="_Items", ThisKey="ItemGroupId", OtherKey="ItemGroupId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemGroup = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public sealed partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemId;
		
		private System.Nullable<int> _ItemGroupId;
		
		private string _ItemName;
		
		private string _ItemDesc;
		
		private EntitySet<BuyDetail> _BuyDetails;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<ItemGroup> _ItemGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnItemGroupIdChanging(System.Nullable<int> value);
    partial void OnItemGroupIdChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemDescChanging(string value);
    partial void OnItemDescChanged();
    #endregion
		
		public Item()
		{
			this._BuyDetails = new EntitySet<BuyDetail>(new Action<BuyDetail>(this.attach_BuyDetails), new Action<BuyDetail>(this.detach_BuyDetails));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._ItemGroup = default(EntityRef<ItemGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemGroupId", DbType="Int")]
		public System.Nullable<int> ItemGroupId
		{
			get
			{
				return this._ItemGroupId;
			}
			set
			{
				if ((this._ItemGroupId != value))
				{
					if (this._ItemGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemGroupIdChanging(value);
					this.SendPropertyChanging();
					this._ItemGroupId = value;
					this.SendPropertyChanged("ItemGroupId");
					this.OnItemGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDesc", DbType="NVarChar(MAX)")]
		public string ItemDesc
		{
			get
			{
				return this._ItemDesc;
			}
			set
			{
				if ((this._ItemDesc != value))
				{
					this.OnItemDescChanging(value);
					this.SendPropertyChanging();
					this._ItemDesc = value;
					this.SendPropertyChanged("ItemDesc");
					this.OnItemDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_BuyDetail", Storage="_BuyDetails", ThisKey="ItemId", OtherKey="ItemId")]
		public EntitySet<BuyDetail> BuyDetails
		{
			get
			{
				return this._BuyDetails;
			}
			set
			{
				this._BuyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Stock", Storage="_Stocks", ThisKey="ItemId", OtherKey="ItemId")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemGroup_Item", Storage="_ItemGroup", ThisKey="ItemGroupId", OtherKey="ItemGroupId", IsForeignKey=true)]
		public ItemGroup ItemGroup
		{
			get
			{
				return this._ItemGroup.Entity;
			}
			set
			{
				ItemGroup previousValue = this._ItemGroup.Entity;
				if (((previousValue != value) 
							|| (this._ItemGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemGroup.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemGroup.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ItemGroupId = value.ItemGroupId;
					}
					else
					{
						this._ItemGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuyDetails(BuyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_BuyDetails(BuyDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logs")]
	public sealed partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LogId;
		
		private System.Nullable<int> _UserId;
		
		private string _LogIn;
		
		private string _LogOut;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogIdChanging(int value);
    partial void OnLogIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnLogInChanging(string value);
    partial void OnLogInChanged();
    partial void OnLogOutChanging(string value);
    partial void OnLogOutChanged();
    #endregion
		
		public Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LogId
		{
			get
			{
				return this._LogId;
			}
			set
			{
				if ((this._LogId != value))
				{
					this.OnLogIdChanging(value);
					this.SendPropertyChanging();
					this._LogId = value;
					this.SendPropertyChanged("LogId");
					this.OnLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogIn", DbType="NVarChar(30)")]
		public string LogIn
		{
			get
			{
				return this._LogIn;
			}
			set
			{
				if ((this._LogIn != value))
				{
					this.OnLogInChanging(value);
					this.SendPropertyChanging();
					this._LogIn = value;
					this.SendPropertyChanged("LogIn");
					this.OnLogInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogOut", DbType="NVarChar(30)")]
		public string LogOut
		{
			get
			{
				return this._LogOut;
			}
			set
			{
				if ((this._LogOut != value))
				{
					this.OnLogOutChanging(value);
					this.SendPropertyChanging();
					this._LogOut = value;
					this.SendPropertyChanged("LogOut");
					this.OnLogOutChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductPacking")]
	public sealed partial class ProductPacking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackingId;
		
		private string _PackingType;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackingIdChanging(int value);
    partial void OnPackingIdChanged();
    partial void OnPackingTypeChanging(string value);
    partial void OnPackingTypeChanged();
    #endregion
		
		public ProductPacking()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PackingId
		{
			get
			{
				return this._PackingId;
			}
			set
			{
				if ((this._PackingId != value))
				{
					this.OnPackingIdChanging(value);
					this.SendPropertyChanging();
					this._PackingId = value;
					this.SendPropertyChanged("PackingId");
					this.OnPackingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackingType", DbType="NVarChar(30)")]
		public string PackingType
		{
			get
			{
				return this._PackingType;
			}
			set
			{
				if ((this._PackingType != value))
				{
					this.OnPackingTypeChanging(value);
					this.SendPropertyChanging();
					this._PackingType = value;
					this.SendPropertyChanged("PackingType");
					this.OnPackingTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPacking_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="PackingId", OtherKey="PackingId")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ProductPacking = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ProductPacking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public sealed partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankId;
		
		private string _BankName;
		
		private string _BankNumber;
		
		private string _BankOwner;
		
		private string _BankDescription;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIdChanging(int value);
    partial void OnBankIdChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnBankNumberChanging(string value);
    partial void OnBankNumberChanged();
    partial void OnBankOwnerChanging(string value);
    partial void OnBankOwnerChanged();
    partial void OnBankDescriptionChanging(string value);
    partial void OnBankDescriptionChanged();
    #endregion
		
		public Bank()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(100)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankNumber", DbType="NVarChar(30)")]
		public string BankNumber
		{
			get
			{
				return this._BankNumber;
			}
			set
			{
				if ((this._BankNumber != value))
				{
					this.OnBankNumberChanging(value);
					this.SendPropertyChanging();
					this._BankNumber = value;
					this.SendPropertyChanged("BankNumber");
					this.OnBankNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankOwner", DbType="NVarChar(100)")]
		public string BankOwner
		{
			get
			{
				return this._BankOwner;
			}
			set
			{
				if ((this._BankOwner != value))
				{
					this.OnBankOwnerChanging(value);
					this.SendPropertyChanging();
					this._BankOwner = value;
					this.SendPropertyChanged("BankOwner");
					this.OnBankOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankDescription", DbType="NVarChar(100)")]
		public string BankDescription
		{
			get
			{
				return this._BankDescription;
			}
			set
			{
				if ((this._BankDescription != value))
				{
					this.OnBankDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BankDescription = value;
					this.SendPropertyChanged("BankDescription");
					this.OnBankDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Book", Storage="_Books", ThisKey="BankId", OtherKey="BankId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemLog")]
	public sealed partial class SystemLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SysLogId;
		
		private string _Date;
		
		private string _LogMessage;
		
		private string _FormName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSysLogIdChanging(int value);
    partial void OnSysLogIdChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnLogMessageChanging(string value);
    partial void OnLogMessageChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    #endregion
		
		public SystemLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysLogId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SysLogId
		{
			get
			{
				return this._SysLogId;
			}
			set
			{
				if ((this._SysLogId != value))
				{
					this.OnSysLogIdChanging(value);
					this.SendPropertyChanging();
					this._SysLogId = value;
					this.SendPropertyChanged("SysLogId");
					this.OnSysLogIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(30)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogMessage", DbType="NVarChar(MAX)")]
		public string LogMessage
		{
			get
			{
				return this._LogMessage;
			}
			set
			{
				if ((this._LogMessage != value))
				{
					this.OnLogMessageChanging(value);
					this.SendPropertyChanging();
					this._LogMessage = value;
					this.SendPropertyChanged("LogMessage");
					this.OnLogMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormName", DbType="NVarChar(30)")]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForiegnReceivers")]
	public sealed partial class ForiegnReceiver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _F_ReceiverId;
		
		private string _F_ReceiverName;
		
		private string _F_Phone;
		
		private string _F_Address;
		
		private string _F_Country;
		
		private string _F_Description;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnF_ReceiverIdChanging(int value);
    partial void OnF_ReceiverIdChanged();
    partial void OnF_ReceiverNameChanging(string value);
    partial void OnF_ReceiverNameChanged();
    partial void OnF_PhoneChanging(string value);
    partial void OnF_PhoneChanged();
    partial void OnF_AddressChanging(string value);
    partial void OnF_AddressChanged();
    partial void OnF_CountryChanging(string value);
    partial void OnF_CountryChanged();
    partial void OnF_DescriptionChanging(string value);
    partial void OnF_DescriptionChanged();
    #endregion
		
		public ForiegnReceiver()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_ReceiverId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int F_ReceiverId
		{
			get
			{
				return this._F_ReceiverId;
			}
			set
			{
				if ((this._F_ReceiverId != value))
				{
					this.OnF_ReceiverIdChanging(value);
					this.SendPropertyChanging();
					this._F_ReceiverId = value;
					this.SendPropertyChanged("F_ReceiverId");
					this.OnF_ReceiverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_ReceiverName", DbType="NVarChar(30)")]
		public string F_ReceiverName
		{
			get
			{
				return this._F_ReceiverName;
			}
			set
			{
				if ((this._F_ReceiverName != value))
				{
					this.OnF_ReceiverNameChanging(value);
					this.SendPropertyChanging();
					this._F_ReceiverName = value;
					this.SendPropertyChanged("F_ReceiverName");
					this.OnF_ReceiverNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_Phone", DbType="NVarChar(12)")]
		public string F_Phone
		{
			get
			{
				return this._F_Phone;
			}
			set
			{
				if ((this._F_Phone != value))
				{
					this.OnF_PhoneChanging(value);
					this.SendPropertyChanging();
					this._F_Phone = value;
					this.SendPropertyChanged("F_Phone");
					this.OnF_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_Address", DbType="NVarChar(MAX)")]
		public string F_Address
		{
			get
			{
				return this._F_Address;
			}
			set
			{
				if ((this._F_Address != value))
				{
					this.OnF_AddressChanging(value);
					this.SendPropertyChanging();
					this._F_Address = value;
					this.SendPropertyChanged("F_Address");
					this.OnF_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_Country", DbType="NVarChar(30)")]
		public string F_Country
		{
			get
			{
				return this._F_Country;
			}
			set
			{
				if ((this._F_Country != value))
				{
					this.OnF_CountryChanging(value);
					this.SendPropertyChanging();
					this._F_Country = value;
					this.SendPropertyChanged("F_Country");
					this.OnF_CountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_Description", DbType="NVarChar(MAX)")]
		public string F_Description
		{
			get
			{
				return this._F_Description;
			}
			set
			{
				if ((this._F_Description != value))
				{
					this.OnF_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._F_Description = value;
					this.SendPropertyChanged("F_Description");
					this.OnF_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForiegnReceiver_Invoice", Storage="_Invoices", ThisKey="F_ReceiverId", OtherKey="F_ReceiverId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.ForiegnReceiver = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.ForiegnReceiver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactorView")]
	public sealed partial class FactorView
	{
		
		private int _InvoiceId;
		
		private string _Date;
		
		private int _BuyerId;
		
		private string _BuyerName;
		
		private string _Phone;
		
		private string _ReceiverName;
		
		private string _F_ReceiverName;
		
		private System.Nullable<int> _TotalPrice;
		
		private System.Nullable<int> _NetSell;
		
		public FactorView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int NOT NULL")]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this._InvoiceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="Int NOT NULL")]
		public int BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					this._BuyerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="NVarChar(50)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this._BuyerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverName", DbType="NVarChar(30)")]
		public string ReceiverName
		{
			get
			{
				return this._ReceiverName;
			}
			set
			{
				if ((this._ReceiverName != value))
				{
					this._ReceiverName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_ReceiverName", DbType="NVarChar(30)")]
		public string F_ReceiverName
		{
			get
			{
				return this._F_ReceiverName;
			}
			set
			{
				if ((this._F_ReceiverName != value))
				{
					this._F_ReceiverName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int")]
		public System.Nullable<int> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this._TotalPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetSell", DbType="Int")]
		public System.Nullable<int> NetSell
		{
			get
			{
				return this._NetSell;
			}
			set
			{
				if ((this._NetSell != value))
				{
					this._NetSell = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Messages")]
	public sealed partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageId;
		
		private string _MessageText;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIdChanging(int value);
    partial void OnMessageIdChanged();
    partial void OnMessageTextChanging(string value);
    partial void OnMessageTextChanged();
    #endregion
		
		public Message()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageId
		{
			get
			{
				return this._MessageId;
			}
			set
			{
				if ((this._MessageId != value))
				{
					this.OnMessageIdChanging(value);
					this.SendPropertyChanging();
					this._MessageId = value;
					this.SendPropertyChanged("MessageId");
					this.OnMessageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageText", DbType="NVarChar(MAX)")]
		public string MessageText
		{
			get
			{
				return this._MessageText;
			}
			set
			{
				if ((this._MessageText != value))
				{
					this.OnMessageTextChanging(value);
					this.SendPropertyChanging();
					this._MessageText = value;
					this.SendPropertyChanged("MessageText");
					this.OnMessageTextChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookId;
		
		private string _Date;
		
		private System.Nullable<int> _BuyerId;
		
		private System.Nullable<int> _Amount;
		
		private System.Nullable<int> _PayTypeId;
		
		private System.Nullable<int> _BankId;
		
		private string _BookDesc;
		
		private EntityRef<Bank> _Bank;
		
		private EntityRef<Buyer> _Buyer;
		
		private EntityRef<PayType> _PayType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnBuyerIdChanging(System.Nullable<int> value);
    partial void OnBuyerIdChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnPayTypeIdChanging(System.Nullable<int> value);
    partial void OnPayTypeIdChanged();
    partial void OnBankIdChanging(System.Nullable<int> value);
    partial void OnBankIdChanged();
    partial void OnBookDescChanging(string value);
    partial void OnBookDescChanged();
    #endregion
		
		public Book()
		{
			this._Bank = default(EntityRef<Bank>);
			this._Buyer = default(EntityRef<Buyer>);
			this._PayType = default(EntityRef<PayType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="Int")]
		public System.Nullable<int> BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					if (this._Buyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeId", DbType="Int")]
		public System.Nullable<int> PayTypeId
		{
			get
			{
				return this._PayTypeId;
			}
			set
			{
				if ((this._PayTypeId != value))
				{
					if (this._PayType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PayTypeId = value;
					this.SendPropertyChanged("PayTypeId");
					this.OnPayTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankId", DbType="Int")]
		public System.Nullable<int> BankId
		{
			get
			{
				return this._BankId;
			}
			set
			{
				if ((this._BankId != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIdChanging(value);
					this.SendPropertyChanging();
					this._BankId = value;
					this.SendPropertyChanged("BankId");
					this.OnBankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookDesc", DbType="NVarChar(MAX)")]
		public string BookDesc
		{
			get
			{
				return this._BookDesc;
			}
			set
			{
				if ((this._BookDesc != value))
				{
					this.OnBookDescChanging(value);
					this.SendPropertyChanging();
					this._BookDesc = value;
					this.SendPropertyChanged("BookDesc");
					this.OnBookDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_Book", Storage="_Bank", ThisKey="BankId", OtherKey="BankId", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._BankId = value.BankId;
					}
					else
					{
						this._BankId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_Book", Storage="_Buyer", ThisKey="BuyerId", OtherKey="BuyerId", IsForeignKey=true)]
		public Buyer Buyer
		{
			get
			{
				return this._Buyer.Entity;
			}
			set
			{
				Buyer previousValue = this._Buyer.Entity;
				if (((previousValue != value) 
							|| (this._Buyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Buyer.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Buyer.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._BuyerId = value.BuyerId;
					}
					else
					{
						this._BuyerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Buyer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Book", Storage="_PayType", ThisKey="PayTypeId", OtherKey="PayTypeId", IsForeignKey=true)]
		public PayType PayType
		{
			get
			{
				return this._PayType.Entity;
			}
			set
			{
				PayType previousValue = this._PayType.Entity;
				if (((previousValue != value) 
							|| (this._PayType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PayType.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._PayType.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._PayTypeId = value.PayTypeId;
					}
					else
					{
						this._PayTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PayType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PayTypes")]
	public sealed partial class PayType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PayTypeId;
		
		private string _PaymentType;
		
		private EntitySet<Book> _Books;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayTypeIdChanging(int value);
    partial void OnPayTypeIdChanged();
    partial void OnPaymentTypeChanging(string value);
    partial void OnPaymentTypeChanged();
    #endregion
		
		public PayType()
		{
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PayTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PayTypeId
		{
			get
			{
				return this._PayTypeId;
			}
			set
			{
				if ((this._PayTypeId != value))
				{
					this.OnPayTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PayTypeId = value;
					this.SendPropertyChanged("PayTypeId");
					this.OnPayTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="NVarChar(30)")]
		public string PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this.OnPaymentTypeChanging(value);
					this.SendPropertyChanging();
					this._PaymentType = value;
					this.SendPropertyChanged("PaymentType");
					this.OnPaymentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PayType_Book", Storage="_Books", ThisKey="PayTypeId", OtherKey="PayTypeId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.PayType = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.PayType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BooksView")]
	public sealed partial class BooksView
	{
		
		private int _BookId;
		
		private string _Date;
		
		private int _BuyerId;
		
		private string _BuyerName;
		
		private System.Nullable<int> _Amount;
		
		private string _PaymentType;
		
		private string _BankName;
		
		public BooksView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", DbType="Int NOT NULL")]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					this._BookId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="Int NOT NULL")]
		public int BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					this._BuyerId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="NVarChar(50)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this._BuyerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentType", DbType="NVarChar(30)")]
		public string PaymentType
		{
			get
			{
				return this._PaymentType;
			}
			set
			{
				if ((this._PaymentType != value))
				{
					this._PaymentType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(100)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this._BankName = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FactorDetailsView")]
	public sealed partial class FactorDetailsView
	{
		
		private int _InvoiceId;
		
		private string _Date;
		
		private string _BuyerName;
		
		private string _Phone;
		
		private string _LicensePlate;
		
		private System.Nullable<int> _TotalWeight;
		
		private System.Nullable<int> _WorkerCount;
		
		private System.Nullable<int> _WorkerCost;
		
		private System.Nullable<int> _TruckRental;
		
		private System.Nullable<int> _MiscCost;
		
		private string _WeightNote;
		
		private string _DockWeightNote;
		
		private string _ReceiverName;
		
		private string _F_ReceiverName;
		
		private System.Nullable<int> _Discount;
		
		private System.Nullable<int> _TotalPrice;
		
		private System.Nullable<int> _NetSell;
		
		private System.Nullable<int> _Paid;
		
		private string _Description;
		
		private int _DetailId;
		
		private string _ProductName;
		
		private string _SellerName;
		
		private string _PackingType;
		
		private System.Nullable<int> _Weight;
		
		private System.Nullable<int> _Qty;
		
		private System.Nullable<int> _Price;
		
		public FactorDetailsView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int NOT NULL")]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this._InvoiceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="NVarChar(50)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this._BuyerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensePlate", DbType="NVarChar(20)")]
		public string LicensePlate
		{
			get
			{
				return this._LicensePlate;
			}
			set
			{
				if ((this._LicensePlate != value))
				{
					this._LicensePlate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalWeight", DbType="Int")]
		public System.Nullable<int> TotalWeight
		{
			get
			{
				return this._TotalWeight;
			}
			set
			{
				if ((this._TotalWeight != value))
				{
					this._TotalWeight = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerCount", DbType="Int")]
		public System.Nullable<int> WorkerCount
		{
			get
			{
				return this._WorkerCount;
			}
			set
			{
				if ((this._WorkerCount != value))
				{
					this._WorkerCount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerCost", DbType="Int")]
		public System.Nullable<int> WorkerCost
		{
			get
			{
				return this._WorkerCost;
			}
			set
			{
				if ((this._WorkerCost != value))
				{
					this._WorkerCost = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckRental", DbType="Int")]
		public System.Nullable<int> TruckRental
		{
			get
			{
				return this._TruckRental;
			}
			set
			{
				if ((this._TruckRental != value))
				{
					this._TruckRental = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiscCost", DbType="Int")]
		public System.Nullable<int> MiscCost
		{
			get
			{
				return this._MiscCost;
			}
			set
			{
				if ((this._MiscCost != value))
				{
					this._MiscCost = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightNote", DbType="NVarChar(20)")]
		public string WeightNote
		{
			get
			{
				return this._WeightNote;
			}
			set
			{
				if ((this._WeightNote != value))
				{
					this._WeightNote = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DockWeightNote", DbType="NVarChar(20)")]
		public string DockWeightNote
		{
			get
			{
				return this._DockWeightNote;
			}
			set
			{
				if ((this._DockWeightNote != value))
				{
					this._DockWeightNote = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverName", DbType="NVarChar(30)")]
		public string ReceiverName
		{
			get
			{
				return this._ReceiverName;
			}
			set
			{
				if ((this._ReceiverName != value))
				{
					this._ReceiverName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_ReceiverName", DbType="NVarChar(30)")]
		public string F_ReceiverName
		{
			get
			{
				return this._F_ReceiverName;
			}
			set
			{
				if ((this._F_ReceiverName != value))
				{
					this._F_ReceiverName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int")]
		public System.Nullable<int> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this._Discount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int")]
		public System.Nullable<int> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this._TotalPrice = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetSell", DbType="Int")]
		public System.Nullable<int> NetSell
		{
			get
			{
				return this._NetSell;
			}
			set
			{
				if ((this._NetSell != value))
				{
					this._NetSell = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Int")]
		public System.Nullable<int> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this._Paid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", DbType="Int NOT NULL")]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this._DetailId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(30)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="NVarChar(50)")]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this._SellerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackingType", DbType="NVarChar(30)")]
		public string PackingType
		{
			get
			{
				return this._PackingType;
			}
			set
			{
				if ((this._PackingType != value))
				{
					this._PackingType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int")]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this._Weight = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this._Qty = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public sealed partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SettingId;
		
		private string _CompanyName;
		
		private string _FactorAddress;
		
		private string _FactorTel;
		
		private string _Theme;
		
		private System.Nullable<double> _FontSize;
		
		private string _Wallpaper;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSettingIdChanging(int value);
    partial void OnSettingIdChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnFactorAddressChanging(string value);
    partial void OnFactorAddressChanged();
    partial void OnFactorTelChanging(string value);
    partial void OnFactorTelChanged();
    partial void OnThemeChanging(string value);
    partial void OnThemeChanged();
    partial void OnFontSizeChanging(System.Nullable<double> value);
    partial void OnFontSizeChanged();
    partial void OnWallpaperChanging(string value);
    partial void OnWallpaperChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SettingId
		{
			get
			{
				return this._SettingId;
			}
			set
			{
				if ((this._SettingId != value))
				{
					this.OnSettingIdChanging(value);
					this.SendPropertyChanging();
					this._SettingId = value;
					this.SendPropertyChanged("SettingId");
					this.OnSettingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(100)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorAddress", DbType="NVarChar(MAX)")]
		public string FactorAddress
		{
			get
			{
				return this._FactorAddress;
			}
			set
			{
				if ((this._FactorAddress != value))
				{
					this.OnFactorAddressChanging(value);
					this.SendPropertyChanging();
					this._FactorAddress = value;
					this.SendPropertyChanged("FactorAddress");
					this.OnFactorAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorTel", DbType="NVarChar(20)")]
		public string FactorTel
		{
			get
			{
				return this._FactorTel;
			}
			set
			{
				if ((this._FactorTel != value))
				{
					this.OnFactorTelChanging(value);
					this.SendPropertyChanging();
					this._FactorTel = value;
					this.SendPropertyChanged("FactorTel");
					this.OnFactorTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Theme", DbType="NVarChar(50)")]
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FontSize", DbType="Float")]
		public System.Nullable<double> FontSize
		{
			get
			{
				return this._FontSize;
			}
			set
			{
				if ((this._FontSize != value))
				{
					this.OnFontSizeChanging(value);
					this.SendPropertyChanging();
					this._FontSize = value;
					this.SendPropertyChanged("FontSize");
					this.OnFontSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Wallpaper", DbType="NVarChar(MAX)")]
		public string Wallpaper
		{
			get
			{
				return this._Wallpaper;
			}
			set
			{
				if ((this._Wallpaper != value))
				{
					this.OnWallpaperChanging(value);
					this.SendPropertyChanging();
					this._Wallpaper = value;
					this.SendPropertyChanged("Wallpaper");
					this.OnWallpaperChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceDetails")]
	public sealed partial class InvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailId;
		
		private System.Nullable<int> _InvoiceId;
		
		private System.Nullable<int> _ProductId;
		
		private System.Nullable<int> _SellerId;
		
		private System.Nullable<int> _PackingId;
		
		private System.Nullable<int> _Weight;
		
		private System.Nullable<int> _Loss;
		
		private System.Nullable<int> _Qty;
		
		private System.Nullable<int> _Price;
		
		private System.Nullable<int> _NetWeight;
		
		private EntityRef<ProductPacking> _ProductPacking;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Seller> _Seller;
		
		private EntityRef<Invoice> _Invoice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    partial void OnInvoiceIdChanging(System.Nullable<int> value);
    partial void OnInvoiceIdChanged();
    partial void OnProductIdChanging(System.Nullable<int> value);
    partial void OnProductIdChanged();
    partial void OnSellerIdChanging(System.Nullable<int> value);
    partial void OnSellerIdChanged();
    partial void OnPackingIdChanging(System.Nullable<int> value);
    partial void OnPackingIdChanged();
    partial void OnWeightChanging(System.Nullable<int> value);
    partial void OnWeightChanged();
    partial void OnLossChanging(System.Nullable<int> value);
    partial void OnLossChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnNetWeightChanging(System.Nullable<int> value);
    partial void OnNetWeightChanged();
    #endregion
		
		public InvoiceDetail()
		{
			this._ProductPacking = default(EntityRef<ProductPacking>);
			this._Product = default(EntityRef<Product>);
			this._Seller = default(EntityRef<Seller>);
			this._Invoice = default(EntityRef<Invoice>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					if (this._Invoice.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int")]
		public System.Nullable<int> ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", DbType="Int")]
		public System.Nullable<int> SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					if (this._Seller.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerIdChanging(value);
					this.SendPropertyChanging();
					this._SellerId = value;
					this.SendPropertyChanged("SellerId");
					this.OnSellerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackingId", DbType="Int")]
		public System.Nullable<int> PackingId
		{
			get
			{
				return this._PackingId;
			}
			set
			{
				if ((this._PackingId != value))
				{
					if (this._ProductPacking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackingIdChanging(value);
					this.SendPropertyChanging();
					this._PackingId = value;
					this.SendPropertyChanged("PackingId");
					this.OnPackingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int")]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Loss", DbType="Int")]
		public System.Nullable<int> Loss
		{
			get
			{
				return this._Loss;
			}
			set
			{
				if ((this._Loss != value))
				{
					this.OnLossChanging(value);
					this.SendPropertyChanging();
					this._Loss = value;
					this.SendPropertyChanged("Loss");
					this.OnLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetWeight", DbType="Int")]
		public System.Nullable<int> NetWeight
		{
			get
			{
				return this._NetWeight;
			}
			set
			{
				if ((this._NetWeight != value))
				{
					this.OnNetWeightChanging(value);
					this.SendPropertyChanging();
					this._NetWeight = value;
					this.SendPropertyChanged("NetWeight");
					this.OnNetWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductPacking_InvoiceDetail", Storage="_ProductPacking", ThisKey="PackingId", OtherKey="PackingId", IsForeignKey=true)]
		public ProductPacking ProductPacking
		{
			get
			{
				return this._ProductPacking.Entity;
			}
			set
			{
				ProductPacking previousValue = this._ProductPacking.Entity;
				if (((previousValue != value) 
							|| (this._ProductPacking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductPacking.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._ProductPacking.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._PackingId = value.PackingId;
					}
					else
					{
						this._PackingId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductPacking");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_InvoiceDetail", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seller_InvoiceDetail", Storage="_Seller", ThisKey="SellerId", OtherKey="SellerId", IsForeignKey=true)]
		public Seller Seller
		{
			get
			{
				return this._Seller.Entity;
			}
			set
			{
				Seller previousValue = this._Seller.Entity;
				if (((previousValue != value) 
							|| (this._Seller.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seller.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Seller.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._SellerId = value.SellerId;
					}
					else
					{
						this._SellerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Seller");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_Invoice", ThisKey="InvoiceId", OtherKey="InvoiceId", IsForeignKey=true)]
		public Invoice Invoice
		{
			get
			{
				return this._Invoice.Entity;
			}
			set
			{
				Invoice previousValue = this._Invoice.Entity;
				if (((previousValue != value) 
							|| (this._Invoice.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Invoice.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._Invoice.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._InvoiceId = value.InvoiceId;
					}
					else
					{
						this._InvoiceId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Invoice");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drivers")]
	public sealed partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DriverId;
		
		private string _DriverName;
		
		private string _LicenseId;
		
		private string _LicensePlate;
		
		private string _Phone;
		
		private string _Address;
		
		private EntitySet<Invoice> _Invoices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverIdChanging(int value);
    partial void OnDriverIdChanged();
    partial void OnDriverNameChanging(string value);
    partial void OnDriverNameChanged();
    partial void OnLicenseIdChanging(string value);
    partial void OnLicenseIdChanged();
    partial void OnLicensePlateChanging(string value);
    partial void OnLicensePlateChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Driver()
		{
			this._Invoices = new EntitySet<Invoice>(new Action<Invoice>(this.attach_Invoices), new Action<Invoice>(this.detach_Invoices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DriverId
		{
			get
			{
				return this._DriverId;
			}
			set
			{
				if ((this._DriverId != value))
				{
					this.OnDriverIdChanging(value);
					this.SendPropertyChanging();
					this._DriverId = value;
					this.SendPropertyChanged("DriverId");
					this.OnDriverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverName", DbType="NVarChar(30)")]
		public string DriverName
		{
			get
			{
				return this._DriverName;
			}
			set
			{
				if ((this._DriverName != value))
				{
					this.OnDriverNameChanging(value);
					this.SendPropertyChanging();
					this._DriverName = value;
					this.SendPropertyChanged("DriverName");
					this.OnDriverNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenseId", DbType="NVarChar(11)")]
		public string LicenseId
		{
			get
			{
				return this._LicenseId;
			}
			set
			{
				if ((this._LicenseId != value))
				{
					this.OnLicenseIdChanging(value);
					this.SendPropertyChanging();
					this._LicenseId = value;
					this.SendPropertyChanged("LicenseId");
					this.OnLicenseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicensePlate", DbType="NVarChar(20)")]
		public string LicensePlate
		{
			get
			{
				return this._LicensePlate;
			}
			set
			{
				if ((this._LicensePlate != value))
				{
					this.OnLicensePlateChanging(value);
					this.SendPropertyChanging();
					this._LicensePlate = value;
					this.SendPropertyChanged("LicensePlate");
					this.OnLicensePlateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(12)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Invoice", Storage="_Invoices", ThisKey="DriverId", OtherKey="DriverId")]
		public EntitySet<Invoice> Invoices
		{
			get
			{
				return this._Invoices;
			}
			set
			{
				this._Invoices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_Invoices(Invoice entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Invoice")]
	public sealed partial class Invoice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _InvoiceId;
		
		private string _Date;
		
		private System.Nullable<int> _BuyerId;
		
		private System.Nullable<int> _DriverId;
		
		private System.Nullable<int> _TotalWeight;
		
		private System.Nullable<int> _WorkerCount;
		
		private System.Nullable<int> _WorkerCost;
		
		private System.Nullable<int> _TruckRental;
		
		private System.Nullable<int> _MiscCost;
		
		private string _WeightNote;
		
		private string _DockWeightNote;
		
		private System.Nullable<int> _ReceiverId;
		
		private System.Nullable<int> _F_ReceiverId;
		
		private System.Nullable<int> _Discount;
		
		private System.Nullable<int> _TotalPrice;
		
		private System.Nullable<int> _NetSell;
		
		private System.Nullable<int> _Paid;
		
		private System.Nullable<int> _Profit;
		
		private System.Nullable<int> _Loss;
		
		private string _Description;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<Buyer> _Buyer;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<ForiegnReceiver> _ForiegnReceiver;
		
		private EntityRef<Receiver> _Receiver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInvoiceIdChanging(int value);
    partial void OnInvoiceIdChanged();
    partial void OnDateChanging(string value);
    partial void OnDateChanged();
    partial void OnBuyerIdChanging(System.Nullable<int> value);
    partial void OnBuyerIdChanged();
    partial void OnDriverIdChanging(System.Nullable<int> value);
    partial void OnDriverIdChanged();
    partial void OnTotalWeightChanging(System.Nullable<int> value);
    partial void OnTotalWeightChanged();
    partial void OnWorkerCountChanging(System.Nullable<int> value);
    partial void OnWorkerCountChanged();
    partial void OnWorkerCostChanging(System.Nullable<int> value);
    partial void OnWorkerCostChanged();
    partial void OnTruckRentalChanging(System.Nullable<int> value);
    partial void OnTruckRentalChanged();
    partial void OnMiscCostChanging(System.Nullable<int> value);
    partial void OnMiscCostChanged();
    partial void OnWeightNoteChanging(string value);
    partial void OnWeightNoteChanged();
    partial void OnDockWeightNoteChanging(string value);
    partial void OnDockWeightNoteChanged();
    partial void OnReceiverIdChanging(System.Nullable<int> value);
    partial void OnReceiverIdChanged();
    partial void OnF_ReceiverIdChanging(System.Nullable<int> value);
    partial void OnF_ReceiverIdChanged();
    partial void OnDiscountChanging(System.Nullable<int> value);
    partial void OnDiscountChanged();
    partial void OnTotalPriceChanging(System.Nullable<int> value);
    partial void OnTotalPriceChanged();
    partial void OnNetSellChanging(System.Nullable<int> value);
    partial void OnNetSellChanged();
    partial void OnPaidChanging(System.Nullable<int> value);
    partial void OnPaidChanged();
    partial void OnProfitChanging(System.Nullable<int> value);
    partial void OnProfitChanged();
    partial void OnLossChanging(System.Nullable<int> value);
    partial void OnLossChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Invoice()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._Buyer = default(EntityRef<Buyer>);
			this._Driver = default(EntityRef<Driver>);
			this._ForiegnReceiver = default(EntityRef<ForiegnReceiver>);
			this._Receiver = default(EntityRef<Receiver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this.OnInvoiceIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceId = value;
					this.SendPropertyChanged("InvoiceId");
					this.OnInvoiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="NVarChar(10)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="Int")]
		public System.Nullable<int> BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					if (this._Buyer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverId", DbType="Int")]
		public System.Nullable<int> DriverId
		{
			get
			{
				return this._DriverId;
			}
			set
			{
				if ((this._DriverId != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverIdChanging(value);
					this.SendPropertyChanging();
					this._DriverId = value;
					this.SendPropertyChanged("DriverId");
					this.OnDriverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalWeight", DbType="Int")]
		public System.Nullable<int> TotalWeight
		{
			get
			{
				return this._TotalWeight;
			}
			set
			{
				if ((this._TotalWeight != value))
				{
					this.OnTotalWeightChanging(value);
					this.SendPropertyChanging();
					this._TotalWeight = value;
					this.SendPropertyChanged("TotalWeight");
					this.OnTotalWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerCount", DbType="Int")]
		public System.Nullable<int> WorkerCount
		{
			get
			{
				return this._WorkerCount;
			}
			set
			{
				if ((this._WorkerCount != value))
				{
					this.OnWorkerCountChanging(value);
					this.SendPropertyChanging();
					this._WorkerCount = value;
					this.SendPropertyChanged("WorkerCount");
					this.OnWorkerCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerCost", DbType="Int")]
		public System.Nullable<int> WorkerCost
		{
			get
			{
				return this._WorkerCost;
			}
			set
			{
				if ((this._WorkerCost != value))
				{
					this.OnWorkerCostChanging(value);
					this.SendPropertyChanging();
					this._WorkerCost = value;
					this.SendPropertyChanged("WorkerCost");
					this.OnWorkerCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TruckRental", DbType="Int")]
		public System.Nullable<int> TruckRental
		{
			get
			{
				return this._TruckRental;
			}
			set
			{
				if ((this._TruckRental != value))
				{
					this.OnTruckRentalChanging(value);
					this.SendPropertyChanging();
					this._TruckRental = value;
					this.SendPropertyChanged("TruckRental");
					this.OnTruckRentalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MiscCost", DbType="Int")]
		public System.Nullable<int> MiscCost
		{
			get
			{
				return this._MiscCost;
			}
			set
			{
				if ((this._MiscCost != value))
				{
					this.OnMiscCostChanging(value);
					this.SendPropertyChanging();
					this._MiscCost = value;
					this.SendPropertyChanged("MiscCost");
					this.OnMiscCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeightNote", DbType="NVarChar(20)")]
		public string WeightNote
		{
			get
			{
				return this._WeightNote;
			}
			set
			{
				if ((this._WeightNote != value))
				{
					this.OnWeightNoteChanging(value);
					this.SendPropertyChanging();
					this._WeightNote = value;
					this.SendPropertyChanged("WeightNote");
					this.OnWeightNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DockWeightNote", DbType="NVarChar(20)")]
		public string DockWeightNote
		{
			get
			{
				return this._DockWeightNote;
			}
			set
			{
				if ((this._DockWeightNote != value))
				{
					this.OnDockWeightNoteChanging(value);
					this.SendPropertyChanging();
					this._DockWeightNote = value;
					this.SendPropertyChanged("DockWeightNote");
					this.OnDockWeightNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceiverId", DbType="Int")]
		public System.Nullable<int> ReceiverId
		{
			get
			{
				return this._ReceiverId;
			}
			set
			{
				if ((this._ReceiverId != value))
				{
					if (this._Receiver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReceiverIdChanging(value);
					this.SendPropertyChanging();
					this._ReceiverId = value;
					this.SendPropertyChanged("ReceiverId");
					this.OnReceiverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F_ReceiverId", DbType="Int")]
		public System.Nullable<int> F_ReceiverId
		{
			get
			{
				return this._F_ReceiverId;
			}
			set
			{
				if ((this._F_ReceiverId != value))
				{
					if (this._ForiegnReceiver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnF_ReceiverIdChanging(value);
					this.SendPropertyChanging();
					this._F_ReceiverId = value;
					this.SendPropertyChanged("F_ReceiverId");
					this.OnF_ReceiverIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int")]
		public System.Nullable<int> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int")]
		public System.Nullable<int> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetSell", DbType="Int")]
		public System.Nullable<int> NetSell
		{
			get
			{
				return this._NetSell;
			}
			set
			{
				if ((this._NetSell != value))
				{
					this.OnNetSellChanging(value);
					this.SendPropertyChanging();
					this._NetSell = value;
					this.SendPropertyChanged("NetSell");
					this.OnNetSellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Int")]
		public System.Nullable<int> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profit", DbType="Int")]
		public System.Nullable<int> Profit
		{
			get
			{
				return this._Profit;
			}
			set
			{
				if ((this._Profit != value))
				{
					this.OnProfitChanging(value);
					this.SendPropertyChanging();
					this._Profit = value;
					this.SendPropertyChanged("Profit");
					this.OnProfitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Loss", DbType="Int")]
		public System.Nullable<int> Loss
		{
			get
			{
				return this._Loss;
			}
			set
			{
				if ((this._Loss != value))
				{
					this.OnLossChanging(value);
					this.SendPropertyChanging();
					this._Loss = value;
					this.SendPropertyChanged("Loss");
					this.OnLossChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Invoice_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="InvoiceId", OtherKey="InvoiceId")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Buyer_Invoice", Storage="_Buyer", ThisKey="BuyerId", OtherKey="BuyerId", IsForeignKey=true)]
		public Buyer Buyer
		{
			get
			{
				return this._Buyer.Entity;
			}
			set
			{
				Buyer previousValue = this._Buyer.Entity;
				if (((previousValue != value) 
							|| (this._Buyer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Buyer.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Buyer.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._BuyerId = value.BuyerId;
					}
					else
					{
						this._BuyerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Buyer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Invoice", Storage="_Driver", ThisKey="DriverId", OtherKey="DriverId", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._DriverId = value.DriverId;
					}
					else
					{
						this._DriverId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForiegnReceiver_Invoice", Storage="_ForiegnReceiver", ThisKey="F_ReceiverId", OtherKey="F_ReceiverId", IsForeignKey=true)]
		public ForiegnReceiver ForiegnReceiver
		{
			get
			{
				return this._ForiegnReceiver.Entity;
			}
			set
			{
				ForiegnReceiver previousValue = this._ForiegnReceiver.Entity;
				if (((previousValue != value) 
							|| (this._ForiegnReceiver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForiegnReceiver.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._ForiegnReceiver.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._F_ReceiverId = value.F_ReceiverId;
					}
					else
					{
						this._F_ReceiverId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ForiegnReceiver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Receiver_Invoice", Storage="_Receiver", ThisKey="ReceiverId", OtherKey="ReceiverId", IsForeignKey=true)]
		public Receiver Receiver
		{
			get
			{
				return this._Receiver.Entity;
			}
			set
			{
				Receiver previousValue = this._Receiver.Entity;
				if (((previousValue != value) 
							|| (this._Receiver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Receiver.Entity = null;
						previousValue.Invoices.Remove(this);
					}
					this._Receiver.Entity = value;
					if ((value != null))
					{
						value.Invoices.Add(this);
						this._ReceiverId = value.ReceiverId;
					}
					else
					{
						this._ReceiverId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Receiver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.Invoice = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.F_DetailsView")]
	public sealed partial class F_DetailsView
	{
		
		private int _DetailId;
		
		private System.Nullable<int> _InvoiceId;
		
		private string _ProductName;
		
		private string _SellerName;
		
		private string _PackingType;
		
		private System.Nullable<int> _Weight;
		
		private System.Nullable<int> _Loss;
		
		private System.Nullable<int> _Qty;
		
		private System.Nullable<int> _Price;
		
		public F_DetailsView()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", DbType="Int NOT NULL")]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this._DetailId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceId", DbType="Int")]
		public System.Nullable<int> InvoiceId
		{
			get
			{
				return this._InvoiceId;
			}
			set
			{
				if ((this._InvoiceId != value))
				{
					this._InvoiceId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="NVarChar(30)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="NVarChar(50)")]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this._SellerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackingType", DbType="NVarChar(30)")]
		public string PackingType
		{
			get
			{
				return this._PackingType;
			}
			set
			{
				if ((this._PackingType != value))
				{
					this._PackingType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int")]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this._Weight = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Loss", DbType="Int")]
		public System.Nullable<int> Loss
		{
			get
			{
				return this._Loss;
			}
			set
			{
				if ((this._Loss != value))
				{
					this._Loss = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this._Qty = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this._Price = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuyDetail")]
	public partial class BuyDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailId;
		
		private System.Nullable<int> _FactorId;
		
		private System.Nullable<int> _ItemId;
		
		private System.Nullable<int> _Price;
		
		private System.Nullable<int> _Qty;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<BuyFactor> _BuyFactor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIdChanging(int value);
    partial void OnDetailIdChanged();
    partial void OnFactorIdChanging(System.Nullable<int> value);
    partial void OnFactorIdChanged();
    partial void OnItemIdChanging(System.Nullable<int> value);
    partial void OnItemIdChanged();
    partial void OnPriceChanging(System.Nullable<int> value);
    partial void OnPriceChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    #endregion
		
		public BuyDetail()
		{
			this._Item = default(EntityRef<Item>);
			this._BuyFactor = default(EntityRef<BuyFactor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailId
		{
			get
			{
				return this._DetailId;
			}
			set
			{
				if ((this._DetailId != value))
				{
					this.OnDetailIdChanging(value);
					this.SendPropertyChanging();
					this._DetailId = value;
					this.SendPropertyChanged("DetailId");
					this.OnDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int")]
		public System.Nullable<int> FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					if (this._BuyFactor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int")]
		public System.Nullable<int> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_BuyDetail", Storage="_Item", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.BuyDetails.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.BuyDetails.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuyFactor_BuyDetail", Storage="_BuyFactor", ThisKey="FactorId", OtherKey="FactorId", IsForeignKey=true)]
		public BuyFactor BuyFactor
		{
			get
			{
				return this._BuyFactor.Entity;
			}
			set
			{
				BuyFactor previousValue = this._BuyFactor.Entity;
				if (((previousValue != value) 
							|| (this._BuyFactor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuyFactor.Entity = null;
						previousValue.BuyDetails.Remove(this);
					}
					this._BuyFactor.Entity = value;
					if ((value != null))
					{
						value.BuyDetails.Add(this);
						this._FactorId = value.FactorId;
					}
					else
					{
						this._FactorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BuyFactor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stocks")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockId;
		
		private string _StockDate;
		
		private System.Nullable<int> _FactorId;
		
		private System.Nullable<int> _DepotId;
		
		private System.Nullable<int> _ItemId;
		
		private System.Nullable<int> _StockIn;
		
		private System.Nullable<int> _StockOut;
		
		private string _StockDes;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<BuyFactor> _BuyFactor;
		
		private EntityRef<Depot> _Depot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIdChanging(int value);
    partial void OnStockIdChanged();
    partial void OnStockDateChanging(string value);
    partial void OnStockDateChanged();
    partial void OnFactorIdChanging(System.Nullable<int> value);
    partial void OnFactorIdChanged();
    partial void OnDepotIdChanging(System.Nullable<int> value);
    partial void OnDepotIdChanged();
    partial void OnItemIdChanging(System.Nullable<int> value);
    partial void OnItemIdChanged();
    partial void OnStockInChanging(System.Nullable<int> value);
    partial void OnStockInChanged();
    partial void OnStockOutChanging(System.Nullable<int> value);
    partial void OnStockOutChanged();
    partial void OnStockDesChanging(string value);
    partial void OnStockDesChanged();
    #endregion
		
		public Stock()
		{
			this._Item = default(EntityRef<Item>);
			this._BuyFactor = default(EntityRef<BuyFactor>);
			this._Depot = default(EntityRef<Depot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StockId
		{
			get
			{
				return this._StockId;
			}
			set
			{
				if ((this._StockId != value))
				{
					this.OnStockIdChanging(value);
					this.SendPropertyChanging();
					this._StockId = value;
					this.SendPropertyChanged("StockId");
					this.OnStockIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockDate", DbType="NVarChar(10)")]
		public string StockDate
		{
			get
			{
				return this._StockDate;
			}
			set
			{
				if ((this._StockDate != value))
				{
					this.OnStockDateChanging(value);
					this.SendPropertyChanging();
					this._StockDate = value;
					this.SendPropertyChanged("StockDate");
					this.OnStockDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", DbType="Int")]
		public System.Nullable<int> FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					if (this._BuyFactor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", DbType="Int")]
		public System.Nullable<int> DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					if (this._Depot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepotIdChanging(value);
					this.SendPropertyChanging();
					this._DepotId = value;
					this.SendPropertyChanged("DepotId");
					this.OnDepotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int")]
		public System.Nullable<int> ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockIn", DbType="Int")]
		public System.Nullable<int> StockIn
		{
			get
			{
				return this._StockIn;
			}
			set
			{
				if ((this._StockIn != value))
				{
					this.OnStockInChanging(value);
					this.SendPropertyChanging();
					this._StockIn = value;
					this.SendPropertyChanged("StockIn");
					this.OnStockInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockOut", DbType="Int")]
		public System.Nullable<int> StockOut
		{
			get
			{
				return this._StockOut;
			}
			set
			{
				if ((this._StockOut != value))
				{
					this.OnStockOutChanging(value);
					this.SendPropertyChanging();
					this._StockOut = value;
					this.SendPropertyChanged("StockOut");
					this.OnStockOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockDes", DbType="NVarChar(100)")]
		public string StockDes
		{
			get
			{
				return this._StockDes;
			}
			set
			{
				if ((this._StockDes != value))
				{
					this.OnStockDesChanging(value);
					this.SendPropertyChanging();
					this._StockDes = value;
					this.SendPropertyChanged("StockDes");
					this.OnStockDesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Stock", Storage="_Item", ThisKey="ItemId", OtherKey="ItemId", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._ItemId = value.ItemId;
					}
					else
					{
						this._ItemId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuyFactor_Stock", Storage="_BuyFactor", ThisKey="FactorId", OtherKey="FactorId", IsForeignKey=true)]
		public BuyFactor BuyFactor
		{
			get
			{
				return this._BuyFactor.Entity;
			}
			set
			{
				BuyFactor previousValue = this._BuyFactor.Entity;
				if (((previousValue != value) 
							|| (this._BuyFactor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BuyFactor.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._BuyFactor.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._FactorId = value.FactorId;
					}
					else
					{
						this._FactorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BuyFactor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Depot_Stock", Storage="_Depot", ThisKey="DepotId", OtherKey="DepotId", IsForeignKey=true)]
		public Depot Depot
		{
			get
			{
				return this._Depot.Entity;
			}
			set
			{
				Depot previousValue = this._Depot.Entity;
				if (((previousValue != value) 
							|| (this._Depot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Depot.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Depot.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._DepotId = value.DepotId;
					}
					else
					{
						this._DepotId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Depot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BuyFactor")]
	public partial class BuyFactor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FactorId;
		
		private string _FactorDate;
		
		private string _FactorNumber;
		
		private System.Nullable<int> _CompanyId;
		
		private System.Nullable<int> _TotalPrice;
		
		private System.Nullable<int> _Discount;
		
		private System.Nullable<double> _TaxCost;
		
		private System.Nullable<int> _ServiceCost;
		
		private System.Nullable<int> _FinalPrice;
		
		private string _FactorDesc;
		
		private EntitySet<BuyDetail> _BuyDetails;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFactorIdChanging(int value);
    partial void OnFactorIdChanged();
    partial void OnFactorDateChanging(string value);
    partial void OnFactorDateChanged();
    partial void OnFactorNumberChanging(string value);
    partial void OnFactorNumberChanged();
    partial void OnCompanyIdChanging(System.Nullable<int> value);
    partial void OnCompanyIdChanged();
    partial void OnTotalPriceChanging(System.Nullable<int> value);
    partial void OnTotalPriceChanged();
    partial void OnDiscountChanging(System.Nullable<int> value);
    partial void OnDiscountChanged();
    partial void OnTaxCostChanging(System.Nullable<double> value);
    partial void OnTaxCostChanged();
    partial void OnServiceCostChanging(System.Nullable<int> value);
    partial void OnServiceCostChanged();
    partial void OnFinalPriceChanging(System.Nullable<int> value);
    partial void OnFinalPriceChanged();
    partial void OnFactorDescChanging(string value);
    partial void OnFactorDescChanged();
    #endregion
		
		public BuyFactor()
		{
			this._BuyDetails = new EntitySet<BuyDetail>(new Action<BuyDetail>(this.attach_BuyDetails), new Action<BuyDetail>(this.detach_BuyDetails));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FactorId
		{
			get
			{
				return this._FactorId;
			}
			set
			{
				if ((this._FactorId != value))
				{
					this.OnFactorIdChanging(value);
					this.SendPropertyChanging();
					this._FactorId = value;
					this.SendPropertyChanged("FactorId");
					this.OnFactorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorDate", DbType="NVarChar(10)")]
		public string FactorDate
		{
			get
			{
				return this._FactorDate;
			}
			set
			{
				if ((this._FactorDate != value))
				{
					this.OnFactorDateChanging(value);
					this.SendPropertyChanging();
					this._FactorDate = value;
					this.SendPropertyChanged("FactorDate");
					this.OnFactorDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorNumber", DbType="NVarChar(30)")]
		public string FactorNumber
		{
			get
			{
				return this._FactorNumber;
			}
			set
			{
				if ((this._FactorNumber != value))
				{
					this.OnFactorNumberChanging(value);
					this.SendPropertyChanging();
					this._FactorNumber = value;
					this.SendPropertyChanged("FactorNumber");
					this.OnFactorNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyId", DbType="Int")]
		public System.Nullable<int> CompanyId
		{
			get
			{
				return this._CompanyId;
			}
			set
			{
				if ((this._CompanyId != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIdChanging(value);
					this.SendPropertyChanging();
					this._CompanyId = value;
					this.SendPropertyChanged("CompanyId");
					this.OnCompanyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int")]
		public System.Nullable<int> TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int")]
		public System.Nullable<int> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxCost", DbType="Float")]
		public System.Nullable<double> TaxCost
		{
			get
			{
				return this._TaxCost;
			}
			set
			{
				if ((this._TaxCost != value))
				{
					this.OnTaxCostChanging(value);
					this.SendPropertyChanging();
					this._TaxCost = value;
					this.SendPropertyChanged("TaxCost");
					this.OnTaxCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceCost", DbType="Int")]
		public System.Nullable<int> ServiceCost
		{
			get
			{
				return this._ServiceCost;
			}
			set
			{
				if ((this._ServiceCost != value))
				{
					this.OnServiceCostChanging(value);
					this.SendPropertyChanging();
					this._ServiceCost = value;
					this.SendPropertyChanged("ServiceCost");
					this.OnServiceCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalPrice", DbType="Int")]
		public System.Nullable<int> FinalPrice
		{
			get
			{
				return this._FinalPrice;
			}
			set
			{
				if ((this._FinalPrice != value))
				{
					this.OnFinalPriceChanging(value);
					this.SendPropertyChanging();
					this._FinalPrice = value;
					this.SendPropertyChanged("FinalPrice");
					this.OnFinalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorDesc", DbType="NVarChar(MAX)")]
		public string FactorDesc
		{
			get
			{
				return this._FactorDesc;
			}
			set
			{
				if ((this._FactorDesc != value))
				{
					this.OnFactorDescChanging(value);
					this.SendPropertyChanging();
					this._FactorDesc = value;
					this.SendPropertyChanged("FactorDesc");
					this.OnFactorDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuyFactor_BuyDetail", Storage="_BuyDetails", ThisKey="FactorId", OtherKey="FactorId")]
		public EntitySet<BuyDetail> BuyDetails
		{
			get
			{
				return this._BuyDetails;
			}
			set
			{
				this._BuyDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BuyFactor_Stock", Storage="_Stocks", ThisKey="FactorId", OtherKey="FactorId")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_BuyFactor", Storage="_Company", ThisKey="CompanyId", OtherKey="CompanyId", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.BuyFactors.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.BuyFactors.Add(this);
						this._CompanyId = value.CompanyId;
					}
					else
					{
						this._CompanyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BuyDetails(BuyDetail entity)
		{
			this.SendPropertyChanging();
			entity.BuyFactor = this;
		}
		
		private void detach_BuyDetails(BuyDetail entity)
		{
			this.SendPropertyChanging();
			entity.BuyFactor = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.BuyFactor = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.BuyFactor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Depot")]
	public sealed partial class Depot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepotId;
		
		private string _DepotName;
		
		private System.Nullable<bool> _IsDefault;
		
		private EntitySet<Stock> _Stocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepotIdChanging(int value);
    partial void OnDepotIdChanged();
    partial void OnDepotNameChanging(string value);
    partial void OnDepotNameChanged();
    partial void OnIsDefaultChanging(System.Nullable<bool> value);
    partial void OnIsDefaultChanged();
    #endregion
		
		public Depot()
		{
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepotId
		{
			get
			{
				return this._DepotId;
			}
			set
			{
				if ((this._DepotId != value))
				{
					this.OnDepotIdChanging(value);
					this.SendPropertyChanging();
					this._DepotId = value;
					this.SendPropertyChanged("DepotId");
					this.OnDepotIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepotName", DbType="NVarChar(50)")]
		public string DepotName
		{
			get
			{
				return this._DepotName;
			}
			set
			{
				if ((this._DepotName != value))
				{
					this.OnDepotNameChanging(value);
					this.SendPropertyChanging();
					this._DepotName = value;
					this.SendPropertyChanged("DepotName");
					this.OnDepotNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDefault", DbType="Bit")]
		public System.Nullable<bool> IsDefault
		{
			get
			{
				return this._IsDefault;
			}
			set
			{
				if ((this._IsDefault != value))
				{
					this.OnIsDefaultChanging(value);
					this.SendPropertyChanging();
					this._IsDefault = value;
					this.SendPropertyChanged("IsDefault");
					this.OnIsDefaultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Depot_Stock", Storage="_Stocks", ThisKey="DepotId", OtherKey="DepotId")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		private void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		private void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Depot = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Depot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ViewStock")]
	public sealed partial class ViewStock
	{
		
		private int _ItemId;
		
		private System.Nullable<int> _ItemGroupId;
		
		private string _GroupName;
		
		private string _Unit1;
		
		private string _Unit2;
		
		private string _ItemName;
		
		private System.Nullable<int> _SumStockIn;
		
		private System.Nullable<int> _SumStockOut;
		
		private System.Nullable<int> _StockBalance;
		
		public ViewStock()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					this._ItemId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemGroupId", DbType="Int")]
		public System.Nullable<int> ItemGroupId
		{
			get
			{
				return this._ItemGroupId;
			}
			set
			{
				if ((this._ItemGroupId != value))
				{
					this._ItemGroupId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(30)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this._GroupName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit1", DbType="NVarChar(20)")]
		public string Unit1
		{
			get
			{
				return this._Unit1;
			}
			set
			{
				if ((this._Unit1 != value))
				{
					this._Unit1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit2", DbType="NVarChar(20)")]
		public string Unit2
		{
			get
			{
				return this._Unit2;
			}
			set
			{
				if ((this._Unit2 != value))
				{
					this._Unit2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this._ItemName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumStockIn", DbType="Int")]
		public System.Nullable<int> SumStockIn
		{
			get
			{
				return this._SumStockIn;
			}
			set
			{
				if ((this._SumStockIn != value))
				{
					this._SumStockIn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumStockOut", DbType="Int")]
		public System.Nullable<int> SumStockOut
		{
			get
			{
				return this._SumStockOut;
			}
			set
			{
				if ((this._SumStockOut != value))
				{
					this._SumStockOut = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockBalance", DbType="Int")]
		public System.Nullable<int> StockBalance
		{
			get
			{
				return this._StockBalance;
			}
			set
			{
				if ((this._StockBalance != value))
				{
					this._StockBalance = value;
				}
			}
		}
	}
	
	public partial class FillRolesByIdResult
	{
		
		private int _RoleId;
		
		private string _RoleName;
		
		private System.Nullable<bool> _SettingPermission;
		
		private System.Nullable<bool> _UserPermission;
		
		private System.Nullable<bool> _BankPermission;
		
		private System.Nullable<bool> _FactorPermission;
		
		public FillRolesByIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this._RoleId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettingPermission", DbType="Bit")]
		public System.Nullable<bool> SettingPermission
		{
			get
			{
				return this._SettingPermission;
			}
			set
			{
				if ((this._SettingPermission != value))
				{
					this._SettingPermission = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPermission", DbType="Bit")]
		public System.Nullable<bool> UserPermission
		{
			get
			{
				return this._UserPermission;
			}
			set
			{
				if ((this._UserPermission != value))
				{
					this._UserPermission = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankPermission", DbType="Bit")]
		public System.Nullable<bool> BankPermission
		{
			get
			{
				return this._BankPermission;
			}
			set
			{
				if ((this._BankPermission != value))
				{
					this._BankPermission = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FactorPermission", DbType="Bit")]
		public System.Nullable<bool> FactorPermission
		{
			get
			{
				return this._FactorPermission;
			}
			set
			{
				if ((this._FactorPermission != value))
				{
					this._FactorPermission = value;
				}
			}
		}
	}
	
	public partial class FillUsersByIdResult
	{
		
		private int _UserId;
		
		private System.Nullable<int> _RoleId;
		
		private string _Fullname;
		
		private string _LoginUser;
		
		private string _LoginPass;
		
		public FillUsersByIdResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int")]
		public System.Nullable<int> RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this._RoleId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="NVarChar(30)")]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this._Fullname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginUser", DbType="NVarChar(50)")]
		public string LoginUser
		{
			get
			{
				return this._LoginUser;
			}
			set
			{
				if ((this._LoginUser != value))
				{
					this._LoginUser = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginPass", DbType="NVarChar(50)")]
		public string LoginPass
		{
			get
			{
				return this._LoginPass;
			}
			set
			{
				if ((this._LoginPass != value))
				{
					this._LoginPass = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
